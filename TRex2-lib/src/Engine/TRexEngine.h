//
// This file is part of T-Rex, a Complex Event Processing Middleware.
// See http://home.dei.polimi.it/margara
//
// Authors: Alessandro Margara, Daniele Rogora
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
//

#ifndef TREXENGINE_H_
#define TREXENGINE_H_

#include <unistd.h>
#include "StacksRule.h"
#include "IndexingTable.h"
#include "ResultListener.h"
#include "../Packets/RulePkt.h"
#include "../Packets/PubPkt.h"
//#include "../../../TRex-Server/src/Packet/PacketMarshaller.hpp"
#include "client.h"
#include "../Marshalling/Marshaller.h"
#include <pthread.h>
#include "Engine.h"

typedef std::map<int, StacksRule*> StacksRules;

typedef struct SharedStruct {
  pthread_cond_t* processCond;
  pthread_cond_t* resultCond;
  pthread_mutex_t* processMutex;
  pthread_mutex_t* resultMutex;
  int* stillProcessing;
  bool finish;
  int lowerBound;
  int upperBound;
  std::set<PubPkt*> result;
  MatchingHandler* mh;
  StacksRules* stacksRule;
  PubPkt* pkt;
} Shared;

/**
 * This is the engine of T-Rex. It creates new automata starting from received
 * rule packets,
 * and processes incoming publications to detect complex events.
 */
class TRexEngine : public Engine {
public:
  /**
   * Constructor
   */
  TRexEngine(int numProc);

  /**
   * Destructor
   */
  ~TRexEngine();

  /**
   * Creates data structures needed for processing
   */
  void finalize();

  /**
   * Processes the given rule pkt
   */
  void processRulePkt(RulePkt* pkt);

  /**
   * Processes the given publication pkt
   */
  void processPubPkt(PubPkt* pkt);

  /**
   * Deletes all stacksRules
   */
  void deleteStacksRules();

  /**
   * Adds a new ResultHandler
   */
  void addResultListener(ResultListener* resultListener) {
    resultListeners.insert(resultListener);
  }

  /**
   *  Removes the given ResultHandler
   */
  void removeResultListener(ResultListener* resultListener) {
    resultListeners.erase(resultListener);
  }

  std::map<int, std::vector<Client*>> clients;
  std::map<int, std::vector<int>> streamIdToNodes;
  Marshaller marshaller;
  long timeLastRecvdTuple = 0;
private:
  /**
   * Processes the given publication pkt, but this is called from the engine
   * itself when the pubPkt is needed by other rules
   */
  void processPubPkt(PubPkt* pkt, bool recursion);

  /**
   * This is called when adding a new rule, so that the recursion is enabled
   * only if needed, i.e. if the output of some any rule is taken as input by
   * some other rule
   */
  void setRecursionNeeded(RulePkt* pkt);

  /**
   * This is used to limit the recursion depth, mainly to avoid infinite loop in
   * case of cycles in the events graph
   */
  int recursionDepth;
  bool recursionNeeded;

  /**
   * Set of events used as input by all the rules installed
   */
  std::set<int> inputEvents;

  /**
   * Set of all the events possibly generated by all the rules installed
   */
  std::set<int> outputEvents;

  // Stored stacks rules, sorted per rule id
  StacksRules* stacksRules;
  // The indexing table to speed up matching
  IndexingTable indexingTable;
  // Result listeners associated with the processing engine
  std::set<ResultListener*> resultListeners;
  // Array of threads to use
  pthread_t* threads;
  // Shared Memory
  Shared* shared;
  // Number of processors to use
  int numProc;
};

#endif
